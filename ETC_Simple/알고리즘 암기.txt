서로소 집합 - 무방향 사이클 ( 간선 union 하기 , 루트노드 같으면 사이클 )

최단거리 - 다익스트라 heapq 제일 적은거 파악하면서 처리된거 아니면 갱신

플로이드 워셜 - kab 순서 지켜서 모든 행렬 갱신 min(ab, ak+ kb)

최소 신장 트리 - 사이클 ( 서로소 ) : 젤 작은거부터 꺼내서 사이클 확인 ( 크루스칼 알고리즘 )

위상 정렬 - 진입 차수 0 인거 큐에 넣기. 큐꺼내서 해당 노드 출발 간선 제거. 또 0된거 넣기


DFS / BFS 는 노선별로 False 로 한다음 체크할것
BFS를 통해 최단거리 collections.deque

import heapq

리스트 = []

heapq.heappush(리스트, 넣을거)
heapq.heappop(리스트)



기존 리스트를 힙으로 변환

리스트 = [4, 1, 7, 3, 8, 5]
heapq.heapify(리스트 )
print(리스트 )

리스트에 모두 삽입한 다음 마지막에 heapify()하는 방식 



heapq.nlargest(k,리스트)

리스트에서 k개의 큰 값 담은 리스트 추출하기
heapq.nlargest(k,리스트)[-1] 하면 k번째로 큰 수리턴임

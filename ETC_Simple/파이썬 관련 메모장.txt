알아둬야할 함수들

__doc__ 알고있기

enumerate(리스트) -> 키 밸류 
사전.items() -> 키 밸류
----

그냥 사전 

d = { 'a' : 123, 'b' : "shit" }

if 'b' in d > 키가 있는지
d.keys() > 딕셔너리의 키 뽑기
d.values() > 딕셔너리의 값 뽑기
d.items() > 딕셔너리 키,값 합쳐서 뽑기
d.get('ccc') > 딕셔너리 키로 값 얻기
del d['a'] > 딕셔너리에서 키,값 한쌍 지우기 만약 'a'란 키 없으면 오류
d.clear() > 다지우기

사전.get(key,default=None)

만약 키가 없으면 default값 반환함.


사전 정렬하기 : https://velog.io/@kylexid/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%9E%90%EB%A3%8C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0

--

zip() 함수 
https://www.daleseo.com/python-zip/
----


A=B=C=값 가능
a == b == c == b != '#' 가능



시간 약속부터
알아둬야할 함수들
최대 = 1e9

리스트.count(요소) = 요소가 몇개 들어있는지 리턴

sort(reverse = True)
sorted(reverse=True)

itertools들--------------------------------------


data = [ 'a', 'b', 'c' ]



result = list(permutations(data,3)) # 모든 순열(순서있음) 구하기


result = list(combinations(data,2)) # 2개 뽑는 모든 조합 구하기


result = list(product(data, repeat=2)) # 2개를 뽑는 모든 순열 구하기(중복 허용)

result = list(combinations_with_replacement(data,2)) # 2개를 뽑는 모든 조합 구하기(중복 허용)



collection들--------------------------------------

카운터
둘다 초기값 디폴트 있음
count = collections.Counter(nums)
>> collections.Counter(nums).most_common(k)
nums에서 최대 값을 가진 k개 추출


counter.subtract('A')
A 하나 줄이는거임

counter += collections.Counter()
빈 카운터를 더하면 0이하인 아이템을 목록에서 아예 제거해버림.

카운터는 +, - 연산을 제공합니다.


디폴트사전
collections.defaultdict(int)



데큐
collections.deque(리스트)

collections.deque(maxlen=숫자)
> 데크는 크기를 지정할 수 있는 maxlen 파라미터를 지원하며, 이 경우 최대 크기를 초과할 때 가장 오래된 항목부터 제거된다.


ex) 
dequedata = collections.deque(basedata)
 
dequedata.append('e')
 
dequedata.appendleft('z')

(Pop, Popleft)


------------------------------

import heapq

리스트 = []

heapq.heappush(리스트, 넣을거)
heapq.heappop(리스트)



기존 리스트를 힙으로 변환

리스트 = [4, 1, 7, 3, 8, 5]
heapq.heapify(리스트 )
print(리스트 )

리스트에 모두 삽입한 다음 마지막에 heapify()하는 방식 



heapq.nlargest(k,리스트)

리스트에서 k개의 큰 값 담은 리스트 추출하기
heapq.nlargest(k,리스트)[-1] 하면 k번째로 큰 수리턴임


--------------

import bisect

bisect.bisect_left(정렬된리스트,값)     
bisect.bisect_right(정렬된리스트,값)   

정렬된 순서를 유지하면서 리스트에 데이터를 삽입할 가장 (왼쪽/오른쪽) 인덱스를 찾는 메서드


만약 4라면
1  2  4  4  8 
    ↑    ↑












(float('inf') / sys.maxsize 통해 무제한 표기가능)

몰랐던 함수들

문자열 관련임 중요!-----------------------------------------------------------------


startswith()를 이용하여 문자열이 특정 문자열로 시작하는지 확인할 수 있습니다.
>String1.startswith(String2)
String1이 String2로 시작되는지 (String2가 String1의 접두어인지)를 찾아주는 기본 함수

ex) 
str = 'Hello world, Python!'
if str.startswith('Hello'):
    print('It starts with Hello')

if not str.startswith('Python'):
    print('It does not start with Python')



문자열.replace("검색 문자", "치환 문자", 치환 횟수)
치환횟수 없으면 모두다 바꿈, 횟수 있으면 앞에서부터





문자열.zfill(width) > 문자열 앞 0으로 채우기 

문자열.rjust(width, [fillchar])  >> 지정해주기

ex) "2:.rjust(3,"0")
>> "002"





re.sub(정규식,대체할문자,대상문자열)

ex ) 

s = s.lower()
re.sub('[^a-z0-9]','',s)




리스트 뒤집기는 [::-1]

.isalpha()

.isdigit

float.is_integer()


'구분자'.join(리스트) >> 합쳐져서 str됨


문자열.count("1") >> 1의갯수


---
b = bin(10진수)
> str형식으로 2진수 됨

10진수를 2진수로

b = bin(16)
print(b)
# 0b10000

2진수를 다시 10진수로 

a = int('0b10000', 2)
print(a)
# 16



-------------------------

and 와 or 의 return value 
참고

1) A and B

- A,B 둘 다 참이면 B 를 출력

- A,B 둘 다 거짓이면 A 를 출력

- A, B 둘 중에 하나만 참이면 거짓인 값을 출력

 

2) A or B

- A,B 둘 다 참이면 A 를 출력

- A,B 둘 다 거짓이면 B 를 출력

- A, B 둘 중에 하나만 참이면 참인 값을 출력








-------------------------------------------------------
결과 = A if 조건 else B
참이면 A 아니면 B
기본 if - else문과는 다르게 한 줄 표현 방법은 결과값(결과)에 조건값이 True(참)이면 A를 False(거짓)이면 B를 반환하도록 할 수 있다.



------------------------------------------------


>>> divmod(10,3)
(3,1)
>>> (10//3, 10%3 )
(3,1)


---

사전 자료형 끼리 , 집합도 가능해보임.
& 교집합 > 같은 키 있는거 넣는데, 작은값 넣음
| 합집합 > 키 모두 넣는데 큰거 넣음

--



functools.reduce(lambda x,y : 10 * x + y, a, 0 ) 
functools.reduce(lambda x,y : 10 * x + y, [1,2,3,4,5] )

----------

콤마(,) 연산자 

중첩리스트로 만들어줌

ex) 
a = [1]
b = [2,3]
a += b
>> a
[1,2,3]

a = [1]
b = [2,3]
a += b,
>> a
[1,[2,3]]

a += [b]와 같음.


-----

any()
포함된 값중 어느하나가 참이라면 항상 True으로 출력함 ( or 같음 )

all()
모든 값이 참이여야 True으로 출력 ( and 같음 )


---------

비트연산자 

& > and
| > or
^ > xor
~ > not


-------

십진수에서 이진수로
>> bin(87)
'0b1010111'

이진수에서 십진수로
>> int('0b1010111', 2 )
87
(0b는 생략가능 )

십진수에서 16진수로
>> hex(87)
'0x57'

--

eval > 문자열을 코드로 변경
eval('수식') # 수식의 결과를 리턴

----

append() 

ex)
a = [1,2,3]
b = [4,5]
a.append(b)
>> a
[1,2,3, [4,5]]


extend

a.extend(b)
>> a 
[1,2,3,4,5]









자료형 비교
type(인트) is not int

str(type(인트)) == "<class 'int'>"
